use nalgebra::Vector2;

//the whole point of this module is to provide a generic interface for events in the code.
//Every target needs to map its native events to these.
#[derive(Copy, Clone)]
pub enum EventKind {
    Quit,
    Resize {
        width: i32,
        height: i32,
    },
    MouseMove {
        x: i32,
        y: i32,
        dx: i32,
        dy: i32,
    },
    MouseDown {
        button_code:MouseCode, 
        x: i32,
        y: i32,
    },
    MouseUp {
        button_code:MouseCode, 
        x: i32,
        y: i32,
    },

    TouchMove {
        x: i32,
        y: i32,
        dx: i32,
        dy: i32,
    },
    TouchDown {
        x: i32,
        y: i32,
    },
    TouchUp {
        x: i32,
        y: i32,
    },

    PinchMove {
        dx0: i32,
        dy0: i32,
        dx1: i32,
        dy1: i32,
    },
    PinchDown {
        x0: i32,
        y0: i32,
        x1: i32,
        y1: i32,
    },
    PinchUp {
        dx0: i32,
        dy0: i32,
        dx1: i32,
        dy1: i32,
    },

    KeyDown {
        code: KeyCode,
    },
    KeyUp {
        code: KeyCode,
    },
}
#[derive(Copy, Clone, PartialEq)]
#[allow(non_camel_case_types)]
pub enum KeyCode {
    ARROW_LEFT,
    ARROW_RIGHT,
    ARROW_UP,
    ARROW_DOWN,
    MINUS,
    KEY_A,
    KEY_B,
    KEY_H,
    KEY_E,
    KEY_G,
    KEY_D,
    KEY_C,
    KEY_I,
    KEY_J,
    KEY_K,
    KEY_L,
    KEY_M,
    KEY_N,
    KEY_O,
    KEY_F,
    KEY_P,
    KEY_Q,
    KEY_R,
    KEY_S,
    KEY_U,
    KEY_T,
    KEY_V,
    KEY_W,
    KEY_X,
    KEY_Y,
    KEY_Z,
    HOME,
    INSERT,
    KP_STAR,
    KP_ENTER,
    ALT_L,
    ALT_R,
    CTRL_L,
    CTRL_R,
    SHIFT_L,
    SHIFT_R,
    SUPER_L,
    MENU,
    NUMLOCK,
    PAUSE,
    PAGE_DOWN,
    PAGE_UP,
    POWER,
    PRINT_SCREEN,
    SUPER_R,
    SCROLL_LOCK,
    SLEEP,
    SPACE,
    TAB,
    WAKE,
    ALT_AND_SYS_RQ,
    BACKSPACE,
    CAPSLOCK,
    CTRL_AND_BREAK,
    DELETE,
    END,
    ENTER,
    ESC,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    KP_0,
    KP_1,
    KP_2,
    KP_3,
    KP_4,
    KP_5,
    KP_6,
    KP_7,
    KP_8,
    KP_9,
    KP_INS,
    KP_END,
    KP_ARROW_DOWN,
    KP_PAGE_DOWN,
    KP_PLUS,
    KP_MINUS,
    KP_ARROW_LEFT,
    KP_ARROW_RIGHT,
    KP_HOME,
    KP_ARROW_UP,
    KP_PAGE_UP,
    KP_DECIMAL,
    KP_DEL,
    KP_DASH,
    KP_FORWARD_SLASH,
    EQUALS,
    BRACKET_LEFT,
    BRAKET_RIGHT,
    PAREN_RIGHT,
    PARENT_LEFT,
    AT,
    COLON,
    QUOTE,
    BACK_QUOTE,
    BACKSLASH,
    COMMA,
    PERIOD,
    FORWARD_SLASH,
    NUM_0,
    NUM_1,
    NUM_2,
    NUM_3,
    NUM_4,
    NUM_5,
    NUM_6,
    NUM_7,
    NUM_8,
    NUM_9,
}
#[allow(non_camel_case_types)]
#[derive(Copy,Clone)]
pub enum MouseCode {
    LEFT_BUTTON,
    RIGHT_BUTTON,
    WHEEL { direction: i32 },
}

/*
#[derive(Copy, Clone, PartialEq)]
#[allow(non_camel_case_types)]
pub enum SingularKey {
    ARROW_LEFT = 0xe04b,
    ARROW_RIGHT = 0xe04d,
    ARROW_UP = 0xe048,
    ARROW_DOWN = 0xe050,
    KEY_A = 0x1e,
    KEY_B = 0x30,
    KEY_H = 0x23,
    KEY_E = 0x12,
    KEY_G = 0x22,
    KEY_D = 0x20,
    KEY_C = 0x2e,
    KEY_I = 0x17,
    KEY_J = 0x24,
    KEY_K = 0x25,
    KEY_L = 0x26,
    KEY_M = 0x32,
    KEY_N = 0x31,
    KEY_O = 0x18,
    KEY_F = 0x21,
    KEY_P = 0x19,
    KEY_Q = 0x10,
    KEY_R = 0x13,
    KEY_S = 0x1f,
    KEY_U = 0x16,
    KEY_T = 0x14,
    KEY_V = 0x2f,
    KEY_W = 0x11,
    KEY_X = 0x2d,
    KEY_Y = 0x15,
    KEY_Z = 0x2c,
    HOME = 0xe047,
    INSERT = 0xe052,
    KP_MINUS = 0x4a,
    KP_STAR = 0x37,
    KP_5 = 0x4c,
    KP_ENTER = 0xe01c,
    ALT_L = 0x38,
    ALT_R = 0xe038,
    CTRL_L = 0x1d,
    CTRL_R = 0xe01d,
    SHIFT_L = 0x2a,
    SHIFT_R = 0x36,
    SUPER_L = 0xe05b,
    MENU = 0xe05d,
    NUMLOCK = 0x45,
    PAUSE = 0xe11d45,
    PAGE_DOWN = 0xe051,
    PAGE_UP = 0xe049,
    POWER = 0xe05e,
    PRINT_SCREEN = 0xe037,
    SUPER_R = 0xe05c,
    SCROLL_LOCK = 0x46,
    SLEEP = 0xe05f,
    SPACE = 0x39,
    TAB = 0x0f,
    WAKE = 0xe063,
    ALT_AND_SYS_RQ = 0x54,
    BACKSPACE = 0x0e,
    CAPSLOCK = 0x3a,
    CTRL_AND_BREAK = 0xe046,
    DELETE = 0xe053,
    END = 0xe04f,
    ENTER = 0x1c,
    ESC = 0x01,
    F1 = 0x3b,
    F2 = 0x3c,
    F3 = 0x3d,
    F4 = 0x3e,
    F5 = 0x3f,
    F6 = 0x40,
    F7 = 0x41,
    F8 = 0x42,
    F9 = 0x43,
    F10 = 0x44,
    F11 = 0x57,
    F12 = 0x58,
}
#[derive(Copy, Clone, PartialEq)]
#[allow(non_camel_case_types)]
pub enum DualKey {
    KP_0_OR_INS = 0x52,
    KP_1_OR_END = 0x4f,
    KP_2_OR_ARROW_DOWN = 0x50,
    KP_3_OR_PAGE_DOWN = 0x51,
    KP_PLUS_OR_MINUS = 0x4e,
    KP_4_OR_ARROW_LEFT = 0x4b,
    KP_6_OR_RIGHT = 0x4d,
    KP_7_OR_HOME = 0x47,
    KP_8_OR_UP = 0x48,
    KP_9_OR_PAGE_UP = 0x49,
    KP_DECIMAL_OR_DEL = 0x53,
    KP_DASH_OR_FORWARD_SLASH = 0xe035,
    NUM_0_OR_RIGHT_PAREN = 0x0b,
    MINUS_OR_UNDERSCORE = 0x0c,
    EQUALS_OR_PLUS = 0x0d,
    NUM_ONE_OR_EXCLAMATION = 02,
    SQUARE_OR_CURLY_LEFT = 0x1a,
    SQUARE_OR_CURLY_RIGHT = 0x1b,
    NUM_2_OR_AT = 0x03,
    SEMI_COLON_OR_COLON = 0x27,
    QUOTE_OR_DOUBLE_QUOTE = 0x28,
    GRAVE_STONG_OR_TILDE = 0x29,
    BACKSLASH_OR_PIPE = 0x2b,
    NUM_3_OR_POUND = 0x04,
    ANGLE_L_OR_COMMA = 0x33,
    ANGLE_R_OR_PERIOD = 0x34,
    FORWARD_SLASH_OR_QUESTION_MARK = 0x35,
    NUM_4_OR_DOLLAR = 0x05,
    NUM_5_OR_PERCENT = 06,
    NUM_6_OR_CARET = 0x07,
    NUM_7_OR_AMPERSAND = 0x08,
    NUM_8_OR_STAR_OR_MULT = 0x09,
    NUM_9_OR_PAREN_L = 0x0a,
}*/
